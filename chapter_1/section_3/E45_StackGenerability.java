/******************************************************************************
 *  Compilation:  javac E45_StackGenerability 
 *  Execution:    java E45_StackGenerability  
 *  Dependencies: StdOut Stack
 *  
 *  Description: 1.3.45 Stack generability. Suppose that we have a sequence 
 *  of intermixed push and pop operations as with our test stack client, where 
 *  the integers 0, 1, ..., N-1 in that order (push directives) are intermixed 
 *  with N minus signs (pop directives). Devise an algorithm that determines 
 *  whether the intermixed sequence causes the stack to underflow. (You may use 
 *  only an amount of space independent of Nâ€”you cannot store the integers in a
 *  data structure.) Devise a linear-time algorithm that determines whether a
 *  given permutation can be generated as output by our test client (depending
 *  on where the pop directives occur)
 *
 *  Example execution:
 *  % java E45_StackGenerability
 *	Will the following interemixed sequences cause underflow?
 *	0 1 2 3 4 - - - - 5 - - - 6 7 - - 8 9 - : true
 *	0 1 - 2 - 3 4 5 - 6 - - 7 - 8 - - 9 - - : false
 *	0 1 2 3 4 5 6 7 8 9 - - - - - - - - - - : false
 *	0 1 - 2 3 - - - - 4 5 - - 6 - 7 - 8 9 - : true
 *
 *	Can the following permutations be generated by a stack?
 *	4 3 2 1 0 9 8 7 6 5 : true
 *	4 6 8 7 5 3 2 9 0 1 : false
 *	2 5 6 7 4 8 9 3 1 0 : true
 *	4 3 2 1 0 5 6 7 8 9 : true
 *	1 2 3 4 5 6 9 8 7 0 : true
 *	0 4 6 5 3 8 1 7 2 9 : false
 *	1 4 7 9 8 6 5 3 0 2 : false
 *	2 1 4 3 6 5 8 7 9 0 : true
 ******************************************************************************/
package chapter_1.section_3;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.Stack;
import java.util.NoSuchElementException;

/**
 * @author jefoliva
 */

public class E45_StackGenerability {
    public static void main(String[] args) {
        StackGenerability.main(args);
    }
}

class StackGenerability {
    public static boolean willUnderflow(String in) {
    	String[] input = in.split("\\s");
        Stack<Integer> items = new Stack<Integer>();
        int item;

        for(String current : input) {
            if(!current.equals("-")) {
            	item = Integer.parseInt(current);
                items.push(item);
            } else {
                if(items.isEmpty())
                	return true;	// Will underflow
                
                items.pop();
            }
        }
        return false;
    }

    private static boolean canBeGenerated(String permutation) {
    	Stack<Integer> s = new Stack<>();
    	String output[] = permutation.split("\\s");
    	
    	// keeps track of the next value to push on the stack (from 0 to 9)
    	int currentpush = 0;	
    	for(String value : output) {
    		// Current integer in the output
    		int outputint = Integer.parseInt(value);	

    		while(currentpush <= outputint)	
    			s.push(currentpush++);

    		// If the current integer in the ouput permutaion is equal to the
    		// top of the stack pop the element
    		if(s.peek() == outputint)
    			s.pop();
    	}
    	// If the stack is empty the permutation can be generated, false otherwise
    	return s.isEmpty();
    }

    public static void main(String[] args) {
    	StdOut.println("Will the following interemixed sequences cause underflow?");

    	String[] intermixedSequences = {
    		"0 1 2 3 4 - - - - 5 - - - 6 7 - - 8 9 -",
    		"0 1 - 2 - 3 4 5 - 6 - - 7 - 8 - - 9 - -",
    		"0 1 2 3 4 5 6 7 8 9 - - - - - - - - - -",
    		"0 1 - 2 3 - - - - 4 5 - - 6 - 7 - 8 9 -",
    	};

    	for(String str : intermixedSequences)
    		StdOut.printf("%s : %b\n", str, willUnderflow(str));

    	StdOut.println("\nCan the following permutations be generated by a stack?");
       	String[] permutations = {
	       "4 3 2 1 0 9 8 7 6 5", 
	       "4 6 8 7 5 3 2 9 0 1",
	       "2 5 6 7 4 8 9 3 1 0",
	       "4 3 2 1 0 5 6 7 8 9",
	       "1 2 3 4 5 6 9 8 7 0",
	       "0 4 6 5 3 8 1 7 2 9",
	       "1 4 7 9 8 6 5 3 0 2",
	       "2 1 4 3 6 5 8 7 9 0"
	    };

	   for(String output : permutations)
       		StdOut.printf("%s : %b\n", output, canBeGenerated(output));
    }
}